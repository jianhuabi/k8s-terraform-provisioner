locals {
  worker_security_group              = ["${aws_security_group.konvoy_private.id}", "${aws_security_group.konvoy_ssh.id}", "${aws_security_group.konvoy_egress.id}"]
  worker_security_group_with_bastion = ["${aws_security_group.konvoy_private.id}", "${aws_security_group.konvoy_egress.id}"]
}

{{ range $index := (datasource "config").pools }}
locals {
  worker{{$index}}_subnet_ids = "${split(",", length(var.worker_pool{{$index}}_subnet_ids) == 0 ? join(",", aws_subnet.konvoy_private.*.id) : join(",", var.worker_pool{{$index}}_subnet_ids))}"
  worker{{$index}}_instance_profile = "${var.worker_pool{{$index}}_iam_instance_profile_name != "" ? var.worker_pool{{$index}}_iam_instance_profile_name : join("", aws_iam_instance_profile.node_profile.*.id)}"
}

variable "worker_pool{{$index}}_name" {
  description = "The name for worker pool {{$index}}"
  default     = "worker{{$index}}"
}

variable "worker_pool{{$index}}_count" {
  description = "Number of k8s nodes for worker pool {{$index}}"
  default     = 0
}

variable "worker_pool{{$index}}_instance_type" {
  description = "[WORKER POOL {{$index}}] Instance type"
  default     = "t3.xlarge"
}

variable "worker_pool{{$index}}_image_id" {
  description = "[WORKER POOL {{$index}}] AWS AMI image ID that will be used for the instances instead of the Mesosphere chosen default images"
  default     = ""
}

variable "worker_pool{{$index}}_root_volume_size" {
  description = "[WORKER POOL {{$index}}] The root volume size"
  default     = "80"
}

variable "worker_pool{{$index}}_root_volume_type" {
  description = "[WORKER POOL {{$index}}] The root volume type"
  default     = ""
}

variable "worker_pool{{$index}}_imagefs_volume_enabled" {
  description = "[WORKER POOL {{$index}}] Whether to have dedicated volume for imagefs"
  default     = false
}

variable "worker_pool{{$index}}_imagefs_volume_size" {
  description = "[WORKER POOL {{$index}}] The size for the dedicated imagefs volume"
  default     = "160"
}

variable "worker_pool{{$index}}_imagefs_volume_type" {
  description = "[WORKER POOL {{$index}}] The type for the dedicated imagefs volume. Should be gp2 or io1"
  default     = "gp2"
}

variable "worker_pool{{$index}}_imagefs_volume_device" {
  description = "[WORKER POOL {{$index}}] The device to mount the volume at."
  default     = "xvdb"
}

variable "worker_pool{{$index}}_associate_public_ip_address" {
  description = "[WORKER POOL {{$index}}] Used to disable public IP association"
  default     = true
}

variable "worker_pool{{$index}}_subnet_ids" {
  type        = "list"
  description = "[WORKER POOL {{$index}}] Subnets to be used to deploy workers"
  default     = []
}

variable "worker_pool{{$index}}_iam_instance_profile_name" {
  description = "Pre-existing iam instanceProfile name to use"
  default     = ""
}

resource "aws_instance" "worker_pool{{$index}}" {
  vpc_security_group_ids = ["${split(",", var.bastion_pool_count > 0 ? join(",", local.worker_security_group_with_bastion) : join(",", local.worker_security_group))}"]
  subnet_id              = "${element(local.worker{{$index}}_subnet_ids, count.index % length(local.worker{{$index}}_subnet_ids))}"
  key_name               = "${local.cluster_name}"
  count                  = "${var.worker_pool{{$index}}_count}"
  ami                    = "${var.worker_pool{{$index}}_image_id != "" ? var.worker_pool{{$index}}_image_id : lookup(local.default_ami_ids, format("centos7_%s", coalesce(var.aws_region, data.aws_region.current.name)))}"
  instance_type          = "${var.worker_pool{{$index}}_instance_type}"
  availability_zone      = "${element(coalescelist(var.aws_availability_zones, data.aws_availability_zones.available.names), count.index)}"
  iam_instance_profile   = "${local.worker{{$index}}_instance_profile}"
  source_dest_check      = "false"
  associate_public_ip_address = "${var.bastion_pool_count > 0 ? false : var.worker_pool{{$index}}_associate_public_ip_address}"

  root_block_device {
    volume_size           = "${var.worker_pool{{$index}}_root_volume_size}"
    volume_type           = "${var.worker_pool{{$index}}_root_volume_type}"
    delete_on_termination = true
  }

  tags = "${merge(
    local.common_tags,
    map(
      "Name", "${local.cluster_name}-${var.worker_pool{{$index}}_name}-${count.index}",
      "konvoy/nodeRoles", "worker"
    )
  )}"

  volume_tags = "${merge(
    local.common_tags_no_cluster,
    map(
      "konvoy/nodeRoles", "worker"
    )
  )}"

  lifecycle {
    ignore_changes = ["tags.%", "volume_tags.%", "volume_tags.CSIVolumeName", "volume_tags.Name"]
  }
}

resource "aws_ebs_volume" "worker_pool{{$index}}_imagefs" {
  count             = "${var.worker_pool{{$index}}_imagefs_volume_enabled ? var.worker_pool{{$index}}_count : 0}"
  availability_zone = "${element(aws_instance.worker_pool{{$index}}.*.availability_zone, count.index)}"
  type              = "${var.worker_pool{{$index}}_imagefs_volume_type}"
  size              = "${var.worker_pool{{$index}}_imagefs_volume_size}"

  tags = "${merge(
    local.common_tags_no_cluster,
    map(
      "Name", "${local.cluster_name}-worker-pool-{{$index}}-volume-imagefs-${count.index}",
      "konvoy/nodeRoles", "worker"
    )
  )}"
}

resource "aws_volume_attachment" "worker_pool{{$index}}_imagefs" {
  count        = "${var.worker_pool{{$index}}_imagefs_volume_enabled ? var.worker_pool{{$index}}_count : 0}"
  device_name  = "/dev/${var.worker_pool{{$index}}_imagefs_volume_device}"
  volume_id    = "${element(aws_ebs_volume.worker_pool{{$index}}_imagefs.*.id, count.index)}"
  instance_id  = "${element(aws_instance.worker_pool{{$index}}.*.id, count.index)}"
  force_detach = true

  lifecycle {
    ignore_changes = ["volume", "instance"]
  }
}
{{ end }}
